generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role{
  admin
  user
}

model User {
  id              String   @id @default(uuid())
  name            String?
  username        String?     @unique
  email           String     @unique
  image           String?
  hashedPassword  String?
  role            Role     @default(user)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  hasNotification Boolean?
  description     String?     @db.Text
  accounts        Account[]
  reservations    Reservation[]
  listing         Listing[]
  rating          Rating[]
}



model Listing {
  id              String   @id @default(uuid())
  fasilitas       Fasilitas[]
  imageSrc        Image[]
  createdAt       DateTime   @default(now())
  title           String
  bed             Int
  roomCount       Int
  guestCount      Int
  price           Int
  discount        Int?
  imagePromo      String?
  description     String @db.VarChar(1000)
  rating          Rating[]
  reservations    Reservation[]
  userId          String?
  user            User?      @relation(fields: [userId],references: [id],onDelete: Cascade)

  @@index([userId])
}

model Rating{
  id              String   @id @default(uuid())
  nilai           Int?
  message         String?
  title           String?
  description     String?
  listingId       String
  listing         Listing    @relation(fields: [listingId], references: [id],onDelete: Cascade)
  userId          String?
  user            User?      @relation(fields: [userId],references: [id],onDelete: Cascade)
  @@index([listingId])
  @@index([userId])
}


model Reservation {
  id              String   @id @default(uuid())
  startDate       DateTime
  endDate         DateTime
  totalPrice      Int
  status          String?
  message         String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  userId          String
  user            User       @relation(fields: [userId], references: [id],onDelete: Cascade)
  listingId       String
  listing         Listing    @relation(fields: [listingId], references: [id],onDelete: Cascade)

  @@index([userId])
  @@index([listingId])
}

model Account {
  id                 String   @id @default(uuid())
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Image{
  id                 String   @id @default(uuid())
  img                String   
  listingId          String
  listing            Listing  @relation(fields: [listingId],references: [id],onDelete: Cascade)

  @@index([listingId])
}
model Fasilitas{
  id                 String   @id @default(uuid())
  label              String   
  listingId          String
  listing            Listing  @relation(fields: [listingId],references: [id],onDelete: Cascade)

  @@index([listingId])
}




